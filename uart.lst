;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 2025/02/18 11:21:54
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x28AB      	GOTO       171
main_usleep:
;main.c,117 :: 		static void usleep(void)
;main.c,119 :: 		__asm BCF 3, 5;
0x0003	0x1283      	BCF        STATUS, 5
;main.c,120 :: 		__asm MOVF REG_SLEEP;
0x0004	0x0850      	MOVF       80, 0
;main.c,121 :: 		__asm BSF 3, 5;
0x0005	0x1683      	BSF        STATUS, 5
;main.c,122 :: 		__asm MOVWF PR2;
0x0006	0x0092      	MOVWF      PR2
;main.c,123 :: 		__asm BCF 3, 5;
0x0007	0x1283      	BCF        STATUS, 5
;main.c,124 :: 		__asm CLRF TMR2;
0x0008	0x0191      	CLRF       TMR2
;main.c,125 :: 		__asm BSF T2CON, 2;
0x0009	0x1512      	BSF        T2CON, 2
;main.c,126 :: 		__asm sleep_loop: ;
sleep_loop:
;main.c,127 :: 		__asm MOVF TMR2;
0x000A	0x0811      	MOVF       TMR2, 0
;main.c,128 :: 		__asm SUBWF REG_SLEEP, 0;
0x000B	0x0250      	SUBWF      80, 0
;main.c,129 :: 		__asm BTFSC STATUS, 1;
0x000C	0x1883      	BTFSC      STATUS, 1
;main.c,130 :: 		__asm GOTO sleep_loop;
0x000D	0x280A      	GOTO       sleep_loop
;main.c,131 :: 		}
L_end_usleep:
0x000E	0x0008      	RETURN
; end of main_usleep
main_led_on:
;main.c,95 :: 		static void led_on()
;main.c,97 :: 		GPIO.B0 = 1;
0x000F	0x1283      	BCF        STATUS, 5
0x0010	0x1405      	BSF        GPIO, 0
;main.c,98 :: 		}
L_end_led_on:
0x0011	0x0008      	RETURN
; end of main_led_on
main_led_off:
;main.c,99 :: 		static void led_off()
;main.c,101 :: 		GPIO.B0 = 0;
0x0012	0x1283      	BCF        STATUS, 5
0x0013	0x1005      	BCF        GPIO, 0
;main.c,102 :: 		}
L_end_led_off:
0x0014	0x0008      	RETURN
; end of main_led_off
main_get_button_state:
;main.c,177 :: 		static char get_button_state(void)
;main.c,179 :: 		cnt = 0;
0x0015	0x1283      	BCF        STATUS, 5
0x0016	0x01A6      	CLRF       _cnt
;main.c,180 :: 		temp = GPIO.B5;
0x0017	0x3000      	MOVLW      0
0x0018	0x1A85      	BTFSC      GPIO, 5
0x0019	0x3001      	MOVLW      1
0x001A	0x00A4      	MOVWF      _temp
;main.c,182 :: 		TMR2 = 0;
0x001B	0x0191      	CLRF       TMR2
;main.c,183 :: 		PR2 = 0x60;
0x001C	0x3060      	MOVLW      96
0x001D	0x1683      	BSF        STATUS, 5
0x001E	0x0092      	MOVWF      PR2
;main.c,184 :: 		T2CON.B2 = 1;
0x001F	0x1283      	BCF        STATUS, 5
0x0020	0x1512      	BSF        T2CON, 2
;main.c,185 :: 		while (TMR2 < 0x60)
L_main_get_button_state14:
0x0021	0x3060      	MOVLW      96
0x0022	0x0211      	SUBWF      TMR2, 0
0x0023	0x1803      	BTFSC      STATUS, 0
0x0024	0x282E      	GOTO       L_main_get_button_state15
;main.c,187 :: 		temp2 = GPIO.B5;
0x0025	0x3000      	MOVLW      0
0x0026	0x1A85      	BTFSC      GPIO, 5
0x0027	0x3001      	MOVLW      1
0x0028	0x00AA      	MOVWF      _temp2
;main.c,188 :: 		if (!temp2)
0x0029	0x082A      	MOVF       _temp2, 0
0x002A	0x1D03      	BTFSS      STATUS, 2
0x002B	0x282D      	GOTO       L_main_get_button_state16
;main.c,190 :: 		cnt++;
0x002C	0x0AA6      	INCF       _cnt, 1
;main.c,191 :: 		}
L_main_get_button_state16:
;main.c,192 :: 		}
0x002D	0x2821      	GOTO       L_main_get_button_state14
L_main_get_button_state15:
;main.c,194 :: 		if (cnt > 10)
0x002E	0x0826      	MOVF       _cnt, 0
0x002F	0x3C0A      	SUBLW      10
0x0030	0x1803      	BTFSC      STATUS, 0
0x0031	0x2835      	GOTO       L_main_get_button_state17
;main.c,196 :: 		temp = 0;
0x0032	0x01A4      	CLRF       _temp
;main.c,197 :: 		led_on();
0x0033	0x200F      	CALL       main_led_on
;main.c,198 :: 		}
0x0034	0x2838      	GOTO       L_main_get_button_state18
L_main_get_button_state17:
;main.c,201 :: 		temp = 1;
0x0035	0x3001      	MOVLW      1
0x0036	0x00A4      	MOVWF      _temp
;main.c,202 :: 		led_off();
0x0037	0x2012      	CALL       main_led_off
;main.c,203 :: 		}
L_main_get_button_state18:
;main.c,204 :: 		T2CON.B2 = 0;
0x0038	0x1112      	BCF        T2CON, 2
;main.c,205 :: 		while (!GPIO.B5)
L_main_get_button_state19:
0x0039	0x1A85      	BTFSC      GPIO, 5
0x003A	0x283C      	GOTO       L_main_get_button_state20
;main.c,206 :: 		;
0x003B	0x2839      	GOTO       L_main_get_button_state19
L_main_get_button_state20:
;main.c,208 :: 		return temp;
0x003C	0x0824      	MOVF       _temp, 0
0x003D	0x00F0      	MOVWF      R0
;main.c,209 :: 		}
L_end_get_button_state:
0x003E	0x0008      	RETURN
; end of main_get_button_state
main_b2c:
;main.c,211 :: 		static char b2c(char b, int d)
;main.c,214 :: 		if (d)
0x003F	0x1283      	BCF        STATUS, 5
0x0040	0x082C      	MOVF       FARG_main_b2c_d, 0
0x0041	0x042D      	IORWF      FARG_main_b2c_d+1, 0
0x0042	0x1903      	BTFSC      STATUS, 2
0x0043	0x2850      	GOTO       L_main_b2c21
;main.c,216 :: 		temp2 = (b & 0xF0) >> 4;
0x0044	0x30F0      	MOVLW      240
0x0045	0x052B      	ANDWF      FARG_main_b2c_b, 0
0x0046	0x00AA      	MOVWF      _temp2
0x0047	0x0CAA      	RRF        _temp2, 1
0x0048	0x13AA      	BCF        _temp2, 7
0x0049	0x0CAA      	RRF        _temp2, 1
0x004A	0x13AA      	BCF        _temp2, 7
0x004B	0x0CAA      	RRF        _temp2, 1
0x004C	0x13AA      	BCF        _temp2, 7
0x004D	0x0CAA      	RRF        _temp2, 1
0x004E	0x13AA      	BCF        _temp2, 7
;main.c,217 :: 		}
0x004F	0x2853      	GOTO       L_main_b2c22
L_main_b2c21:
;main.c,220 :: 		temp2 = (b & 0xF);
0x0050	0x300F      	MOVLW      15
0x0051	0x052B      	ANDWF      FARG_main_b2c_b, 0
0x0052	0x00AA      	MOVWF      _temp2
;main.c,221 :: 		}
L_main_b2c22:
;main.c,223 :: 		if (temp2 < 0xa)
0x0053	0x300A      	MOVLW      10
0x0054	0x022A      	SUBWF      _temp2, 0
0x0055	0x1803      	BTFSC      STATUS, 0
0x0056	0x285A      	GOTO       L_main_b2c23
;main.c,225 :: 		temp2 += '0';
0x0057	0x3030      	MOVLW      48
0x0058	0x07AA      	ADDWF      _temp2, 1
;main.c,226 :: 		}
0x0059	0x285E      	GOTO       L_main_b2c24
L_main_b2c23:
;main.c,229 :: 		temp2 = temp2 - 0xa + 'A';
0x005A	0x300A      	MOVLW      10
0x005B	0x02AA      	SUBWF      _temp2, 1
0x005C	0x3041      	MOVLW      65
0x005D	0x07AA      	ADDWF      _temp2, 1
;main.c,230 :: 		}
L_main_b2c24:
;main.c,231 :: 		return temp2;
0x005E	0x082A      	MOVF       _temp2, 0
0x005F	0x00F0      	MOVWF      R0
;main.c,232 :: 		}
L_end_b2c:
0x0060	0x0008      	RETURN
; end of main_b2c
main_UART_init:
;main.c,104 :: 		static void UART_init()
;main.c,106 :: 		GPIO.B1 = 1;
0x0061	0x1283      	BCF        STATUS, 5
0x0062	0x1485      	BSF        GPIO, 1
;main.c,107 :: 		}
L_end_UART_init:
0x0063	0x0008      	RETURN
; end of main_UART_init
main_UART_write:
;main.c,133 :: 		static void UART_write(char send_char)
;main.c,135 :: 		GPIO.B1 = 0;
0x0064	0x1283      	BCF        STATUS, 5
0x0065	0x1085      	BCF        GPIO, 1
;main.c,136 :: 		__asm BCF 3, 5;
0x0066	0x1283      	BCF        STATUS, 5
;main.c,137 :: 		__asm MOVLW BIT_WAIT_50us;
0x0067	0x305C      	MOVLW      92
;main.c,138 :: 		__asm MOVWF REG_SLEEP;
0x0068	0x00D0      	MOVWF      80
;main.c,140 :: 		usleep();
0x0069	0x2003      	CALL       main_usleep
;main.c,141 :: 		for (j = 0; j < 8; j++)
0x006A	0x01A2      	CLRF       _j
0x006B	0x01A3      	CLRF       _j+1
L_main_UART_write8:
0x006C	0x3080      	MOVLW      128
0x006D	0x0623      	XORWF      _j+1, 0
0x006E	0x00F0      	MOVWF      R0
0x006F	0x3080      	MOVLW      128
0x0070	0x0270      	SUBWF      R0, 0
0x0071	0x1D03      	BTFSS      STATUS, 2
0x0072	0x2875      	GOTO       L_main_UART_write32
0x0073	0x3008      	MOVLW      8
0x0074	0x0222      	SUBWF      _j, 0
L_main_UART_write32:
0x0075	0x1803      	BTFSC      STATUS, 0
0x0076	0x2898      	GOTO       L_main_UART_write9
;main.c,143 :: 		if (send_char & (1 << j))
0x0077	0x0822      	MOVF       _j, 0
0x0078	0x00F2      	MOVWF      R2
0x0079	0x3001      	MOVLW      1
0x007A	0x00F0      	MOVWF      R0
0x007B	0x3000      	MOVLW      0
0x007C	0x00F1      	MOVWF      R0+1
0x007D	0x0872      	MOVF       R2, 0
L_main_UART_write33:
0x007E	0x1903      	BTFSC      STATUS, 2
0x007F	0x2885      	GOTO       L_main_UART_write34
0x0080	0x0DF0      	RLF        R0, 1
0x0081	0x0DF1      	RLF        R0+1, 1
0x0082	0x1070      	BCF        R0, 0
0x0083	0x3EFF      	ADDLW      255
0x0084	0x287E      	GOTO       L_main_UART_write33
L_main_UART_write34:
0x0085	0x082B      	MOVF       FARG_main_UART_write_send_char, 0
0x0086	0x05F0      	ANDWF      R0, 1
0x0087	0x3000      	MOVLW      0
0x0088	0x05F1      	ANDWF      R0+1, 1
0x0089	0x0870      	MOVF       R0, 0
0x008A	0x0471      	IORWF      R0+1, 0
0x008B	0x1903      	BTFSC      STATUS, 2
0x008C	0x288F      	GOTO       L_main_UART_write11
;main.c,145 :: 		GPIO.B1 = 1;
0x008D	0x1485      	BSF        GPIO, 1
;main.c,146 :: 		}
0x008E	0x2890      	GOTO       L_main_UART_write12
L_main_UART_write11:
;main.c,149 :: 		GPIO.B1 = 0;
0x008F	0x1085      	BCF        GPIO, 1
;main.c,150 :: 		}
L_main_UART_write12:
;main.c,151 :: 		__asm BCF 3, 5;
0x0090	0x1283      	BCF        STATUS, 5
;main.c,152 :: 		__asm MOVLW BIT_WAIT_50us;
0x0091	0x305C      	MOVLW      92
;main.c,153 :: 		__asm MOVWF REG_SLEEP;
0x0092	0x00D0      	MOVWF      80
;main.c,155 :: 		usleep();
0x0093	0x2003      	CALL       main_usleep
;main.c,141 :: 		for (j = 0; j < 8; j++)
0x0094	0x0AA2      	INCF       _j, 1
0x0095	0x1903      	BTFSC      STATUS, 2
0x0096	0x0AA3      	INCF       _j+1, 1
;main.c,156 :: 		}
0x0097	0x286C      	GOTO       L_main_UART_write8
L_main_UART_write9:
;main.c,157 :: 		GPIO.B1 = 1;
0x0098	0x1485      	BSF        GPIO, 1
;main.c,158 :: 		__asm BCF 3, 5;
0x0099	0x1283      	BCF        STATUS, 5
;main.c,159 :: 		__asm MOVLW BIT_WAIT_100us;
0x009A	0x30A0      	MOVLW      160
;main.c,160 :: 		__asm MOVWF REG_SLEEP;
0x009B	0x00D0      	MOVWF      80
;main.c,161 :: 		usleep();
0x009C	0x2003      	CALL       main_usleep
;main.c,162 :: 		}
L_end_UART_write:
0x009D	0x0008      	RETURN
; end of main_UART_write
main_read_analog:
;main.c,164 :: 		static void read_analog()
;main.c,166 :: 		__asm BCF 3, 5; // bank 0
0x009E	0x1283      	BCF        STATUS, 5
;main.c,167 :: 		__asm MOVLW 0x87;
0x009F	0x3087      	MOVLW      135
;main.c,168 :: 		__asm MOVWF ADCON0; // Right justified, AN2, ADON, GO
0x00A0	0x009F      	MOVWF      ADCON0
;main.c,169 :: 		__asm analog_loop: ;
analog_loop:
;main.c,170 :: 		__asm BTFSC ADCON0, 1;
0x00A1	0x189F      	BTFSC      ADCON0, 1
;main.c,171 :: 		__asm GOTO analog_loop;
0x00A2	0x28A1      	GOTO       analog_loop
;main.c,173 :: 		vh = ADRESH;
0x00A3	0x1283      	BCF        STATUS, 5
0x00A4	0x081E      	MOVF       ADRESH, 0
0x00A5	0x00A8      	MOVWF      _vh
;main.c,174 :: 		vl = ADRESL;
0x00A6	0x1683      	BSF        STATUS, 5
0x00A7	0x081E      	MOVF       ADRESL, 0
0x00A8	0x1283      	BCF        STATUS, 5
0x00A9	0x00A9      	MOVWF      _vl
;main.c,175 :: 		}
L_end_read_analog:
0x00AA	0x0008      	RETURN
; end of main_read_analog
_main:
;main.c,39 :: 		void main()
;main.c,41 :: 		OSCCON = 0x70;
0x00AB	0x3070      	MOVLW      112
0x00AC	0x1683      	BSF        STATUS, 5
0x00AD	0x008F      	MOVWF      OSCCON
;main.c,42 :: 		TRISIO = 0x34; // input: GP2,GP4,GP5 output:GP0,GP1
0x00AE	0x3034      	MOVLW      52
0x00AF	0x0085      	MOVWF      TRISIO
;main.c,43 :: 		ANSEL = 4;     // GP2 analog
0x00B0	0x3004      	MOVLW      4
0x00B1	0x009F      	MOVWF      ANSEL
;main.c,44 :: 		ADCON0 = 0x85; // Right justified, AN2, ADON
0x00B2	0x3085      	MOVLW      133
0x00B3	0x1283      	BCF        STATUS, 5
0x00B4	0x009F      	MOVWF      ADCON0
;main.c,45 :: 		WPU = 0x30;
0x00B5	0x3030      	MOVLW      48
0x00B6	0x1683      	BSF        STATUS, 5
0x00B7	0x0095      	MOVWF      WPU
;main.c,46 :: 		T2CON = 0x4; // f/1, TMR2m on
0x00B8	0x3004      	MOVLW      4
0x00B9	0x1283      	BCF        STATUS, 5
0x00BA	0x0092      	MOVWF      T2CON
;main.c,47 :: 		CMCON0 = 7;  // AN2
0x00BB	0x3007      	MOVLW      7
0x00BC	0x0099      	MOVWF      CMCON0
;main.c,48 :: 		led_off();
0x00BD	0x2012      	CALL       main_led_off
;main.c,49 :: 		UART_init();
0x00BE	0x2061      	CALL       main_UART_init
;main.c,51 :: 		button = 1;
0x00BF	0x3001      	MOVLW      1
0x00C0	0x00A7      	MOVWF      _button
;main.c,52 :: 		while (1)
L_main0:
;main.c,54 :: 		temp = get_button_state();
0x00C1	0x2015      	CALL       main_get_button_state
0x00C2	0x0870      	MOVF       R0, 0
0x00C3	0x00A4      	MOVWF      _temp
;main.c,55 :: 		if (button == temp)
0x00C4	0x0827      	MOVF       _button, 0
0x00C5	0x0670      	XORWF      R0, 0
0x00C6	0x1D03      	BTFSS      STATUS, 2
0x00C7	0x28C9      	GOTO       L_main2
;main.c,56 :: 		continue;
0x00C8	0x28C1      	GOTO       L_main0
L_main2:
;main.c,57 :: 		button = temp;
0x00C9	0x0824      	MOVF       _temp, 0
0x00CA	0x00A7      	MOVWF      _button
;main.c,59 :: 		if (!button)
0x00CB	0x0824      	MOVF       _temp, 0
0x00CC	0x1D03      	BTFSS      STATUS, 2
0x00CD	0x2913      	GOTO       L_main3
;main.c,61 :: 		read_analog();
0x00CE	0x209E      	CALL       main_read_analog
;main.c,64 :: 		UART_write('T');
0x00CF	0x3054      	MOVLW      84
0x00D0	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x00D1	0x2064      	CALL       main_UART_write
;main.c,65 :: 		UART_write('X');
0x00D2	0x3058      	MOVLW      88
0x00D3	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x00D4	0x2064      	CALL       main_UART_write
;main.c,66 :: 		UART_write('D');
0x00D5	0x3044      	MOVLW      68
0x00D6	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x00D7	0x2064      	CALL       main_UART_write
;main.c,67 :: 		UART_write('A');
0x00D8	0x3041      	MOVLW      65
0x00D9	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x00DA	0x2064      	CALL       main_UART_write
;main.c,68 :: 		UART_write('\r');
0x00DB	0x300D      	MOVLW      13
0x00DC	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x00DD	0x2064      	CALL       main_UART_write
;main.c,69 :: 		UART_write('\n');
0x00DE	0x300A      	MOVLW      10
0x00DF	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x00E0	0x2064      	CALL       main_UART_write
;main.c,70 :: 		UART_write(' ');
0x00E1	0x3020      	MOVLW      32
0x00E2	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x00E3	0x2064      	CALL       main_UART_write
;main.c,71 :: 		UART_write(' ');
0x00E4	0x3020      	MOVLW      32
0x00E5	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x00E6	0x2064      	CALL       main_UART_write
;main.c,72 :: 		UART_write(' ');
0x00E7	0x3020      	MOVLW      32
0x00E8	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x00E9	0x2064      	CALL       main_UART_write
;main.c,74 :: 		vc = b2c(vh, LOW_NIBBLE);
0x00EA	0x0828      	MOVF       _vh, 0
0x00EB	0x00AB      	MOVWF      FARG_main_b2c_b
0x00EC	0x01AC      	CLRF       FARG_main_b2c_d
0x00ED	0x01AD      	CLRF       FARG_main_b2c_d+1
0x00EE	0x203F      	CALL       main_b2c
0x00EF	0x0870      	MOVF       R0, 0
0x00F0	0x00A5      	MOVWF      _vc
;main.c,75 :: 		UART_write(vc);
0x00F1	0x0870      	MOVF       R0, 0
0x00F2	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x00F3	0x2064      	CALL       main_UART_write
;main.c,77 :: 		vc = b2c(vl, HIGH_NIBBLE);
0x00F4	0x0829      	MOVF       _vl, 0
0x00F5	0x00AB      	MOVWF      FARG_main_b2c_b
0x00F6	0x3001      	MOVLW      1
0x00F7	0x00AC      	MOVWF      FARG_main_b2c_d
0x00F8	0x3000      	MOVLW      0
0x00F9	0x00AD      	MOVWF      FARG_main_b2c_d+1
0x00FA	0x203F      	CALL       main_b2c
0x00FB	0x0870      	MOVF       R0, 0
0x00FC	0x00A5      	MOVWF      _vc
;main.c,78 :: 		UART_write(vc);
0x00FD	0x0870      	MOVF       R0, 0
0x00FE	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x00FF	0x2064      	CALL       main_UART_write
;main.c,80 :: 		vc = b2c(vl, LOW_NIBBLE);
0x0100	0x0829      	MOVF       _vl, 0
0x0101	0x00AB      	MOVWF      FARG_main_b2c_b
0x0102	0x01AC      	CLRF       FARG_main_b2c_d
0x0103	0x01AD      	CLRF       FARG_main_b2c_d+1
0x0104	0x203F      	CALL       main_b2c
0x0105	0x0870      	MOVF       R0, 0
0x0106	0x00A5      	MOVWF      _vc
;main.c,81 :: 		UART_write(vc);
0x0107	0x0870      	MOVF       R0, 0
0x0108	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x0109	0x2064      	CALL       main_UART_write
;main.c,83 :: 		UART_write('\n');
0x010A	0x300A      	MOVLW      10
0x010B	0x00AB      	MOVWF      FARG_main_UART_write_send_char
0x010C	0x2064      	CALL       main_UART_write
;main.c,84 :: 		UART_write('\0');
0x010D	0x01AB      	CLRF       FARG_main_UART_write_send_char
0x010E	0x2064      	CALL       main_UART_write
;main.c,86 :: 		__asm BCF 3, 5;
0x010F	0x1283      	BCF        STATUS, 5
;main.c,87 :: 		__asm MOVLW BIT_WAIT_100us;
0x0110	0x30A0      	MOVLW      160
;main.c,88 :: 		__asm MOVWF REG_SLEEP;
0x0111	0x00D0      	MOVWF      80
;main.c,89 :: 		usleep();
0x0112	0x2003      	CALL       main_usleep
;main.c,91 :: 		}
L_main3:
;main.c,92 :: 		}
0x0113	0x28C1      	GOTO       L_main0
;main.c,93 :: 		}
L_end_main:
0x0114	0x2914      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0003      [12]    main_usleep
0x000F       [3]    main_led_on
0x0012       [3]    main_led_off
0x0015      [42]    main_get_button_state
0x003F      [34]    main_b2c
0x0061       [3]    main_UART_init
0x0064      [58]    main_UART_write
0x009E      [13]    main_read_analog
0x00AB     [106]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [1]    GPIO
0x000A       [1]    PCLATH
0x0011       [1]    TMR2
0x0012       [1]    T2CON
0x0019       [1]    CMCON0
0x001E       [1]    ADRESH
0x001F       [1]    ADCON0
0x0020       [2]    ___DoICPAddr
0x0022       [2]    _j
0x0024       [1]    _temp
0x0025       [1]    _vc
0x0026       [1]    _cnt
0x0027       [1]    _button
0x0028       [1]    _vh
0x0029       [1]    _vl
0x002A       [1]    _temp2
0x002B       [1]    FARG_main_b2c_b
0x002B       [1]    FARG_main_UART_write_send_char
0x002C       [2]    FARG_main_b2c_d
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0085       [1]    TRISIO
0x008F       [1]    OSCCON
0x0092       [1]    PR2
0x0095       [1]    WPU
0x009E       [1]    ADRESL
0x009F       [1]    ANSEL
